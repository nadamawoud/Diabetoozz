// <auto-generated />
using System;
using Diabetes.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diabete.Repository.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250324194053_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Diabetes.Core.Entities.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AdminID");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Alarm", b =>
                {
                    b.Property<int>("AlarmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlarmID"), 1L, 1);

                    b.Property<DateTime>("AlarmTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlarmType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlarmID");

                    b.HasIndex("CasualUserID");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.BloodSugarMeasurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementID"), 1L, 1);

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("GlucoseLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MeasurementID");

                    b.HasIndex("CasualUserID");

                    b.ToTable("BloodSugarMeasurements", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.Property<int>("CasualUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CasualUserID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CasualUserID");

                    b.HasIndex("AdminID");

                    b.ToTable("CasualUsers");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionCasualUser", b =>
                {
                    b.Property<int>("ChatbotQuestionCasualUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatbotQuestionCasualUserID"), 1L, 1);

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<string>("ChatbotQuestionCasualUserText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatbotQuestionCasualUserID");

                    b.HasIndex("AdminID");

                    b.HasIndex("CasualUserID");

                    b.ToTable("ChatbotQuestionCasualUsers");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionDoctor", b =>
                {
                    b.Property<int>("ChatbotQuestionDoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatbotQuestionDoctorID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ChatbotQuestionDoctorText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.HasKey("ChatbotQuestionDoctorID");

                    b.HasIndex("AdminID");

                    b.HasIndex("DoctorID");

                    b.ToTable("ChatbotQuestionDoctors");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.Property<int>("ClerkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClerkID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClerkID");

                    b.HasIndex("AdminID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Clerks");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisID"), 1L, 1);

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseID")
                        .HasColumnType("int");

                    b.Property<string>("LabResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("SuggestedLifestyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosisID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Disease", b =>
                {
                    b.Property<int>("DiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DoctorTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MedicalSyndicateCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MedicalSyndicateID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorID");

                    b.HasIndex("AdminID");

                    b.HasIndex("MedicalSyndicateID");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ManagerID");

                    b.HasIndex("AdminID");

                    b.ToTable("Managers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalHistory", b =>
                {
                    b.Property<int>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalHistoryID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ChatbotData")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.HasKey("MedicalHistoryID");

                    b.HasIndex("AdminID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("ManagerID");

                    b.ToTable("MedicalHistories", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalSyndicate", b =>
                {
                    b.Property<int>("MedicalSyndicateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalSyndicateID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfileDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("VerificationStatus")
                        .HasColumnType("bit");

                    b.HasKey("MedicalSyndicateID");

                    b.ToTable("MedicalSyndicates", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.NewsFeedPost", b =>
                {
                    b.Property<int>("NewsFeedPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsFeedPostID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MedicalSyndicateID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("NewsFeedPostID");

                    b.HasIndex("MedicalSyndicateID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("NewsFeedPosts", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("OrganizationID");

                    b.HasIndex("AdminID");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ClerkID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PatientID");

                    b.HasIndex("ClerkID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"), 1L, 1);

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportID");

                    b.HasIndex("CasualUserID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuggestionFood", b =>
                {
                    b.Property<int>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("SuggestedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FoodID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("SuggestionFoods", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuspectDiabetesResult", b =>
                {
                    b.Property<int>("SuspectResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuspectResultID"), 1L, 1);

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SuspectResultID");

                    b.ToTable("SuspectDiabetesResults", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Symptoms", b =>
                {
                    b.Property<int>("SymptomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomID"), 1L, 1);

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SeverityLevel")
                        .HasColumnType("int");

                    b.Property<int>("SuspectResultID")
                        .HasColumnType("int");

                    b.HasKey("SymptomID");

                    b.HasIndex("CasualUserID");

                    b.HasIndex("SuspectResultID");

                    b.ToTable("Symptoms", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Alarm", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("Alarms")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.BloodSugarMeasurement", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("BloodSugarMeasurements")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("CasualUsers")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionCasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("ChatbotQuestionCasualUsers")
                        .HasForeignKey("AdminID");

                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("ChatbotQuestionCasualUsers")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionDoctor", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("ChatbotQuestionDoctors")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("ChatbotQuestionDoctors")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Clerks")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("Clerks")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Diagnosis", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Patient", "Patient")
                        .WithOne("Diagnosis")
                        .HasForeignKey("Diabetes.Core.Entities.Diagnosis", "PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Doctors")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.MedicalSyndicate", "MedicalSyndicate")
                        .WithMany("Doctors")
                        .HasForeignKey("MedicalSyndicateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("MedicalSyndicate");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Manager", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Managers")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalHistory", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Manager", "Manager")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Doctor");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.NewsFeedPost", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.MedicalSyndicate", "MedicalSyndicate")
                        .WithMany("NewsFeedPosts")
                        .HasForeignKey("MedicalSyndicateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Organization", "Organization")
                        .WithMany("NewsFeedPosts")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalSyndicate");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Organizations")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Clerk", "Clerk")
                        .WithMany("Patients")
                        .HasForeignKey("ClerkID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clerk");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Report", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("Reports")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("Reports")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Manager", "Manager")
                        .WithMany("Reports")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CasualUser");

                    b.Navigation("Doctor");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuggestionFood", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Patient", "Patient")
                        .WithOne("SuggestionFood")
                        .HasForeignKey("Diabetes.Core.Entities.SuggestionFood", "PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Symptoms", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("Symptoms")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.SuspectDiabetesResult", "SuspectDiabetesResult")
                        .WithMany("Symptoms")
                        .HasForeignKey("SuspectResultID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CasualUser");

                    b.Navigation("SuspectDiabetesResult");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Admin", b =>
                {
                    b.Navigation("CasualUsers");

                    b.Navigation("ChatbotQuestionCasualUsers");

                    b.Navigation("ChatbotQuestionDoctors");

                    b.Navigation("Clerks");

                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("BloodSugarMeasurements");

                    b.Navigation("ChatbotQuestionCasualUsers");

                    b.Navigation("Reports");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.Navigation("ChatbotQuestionDoctors");

                    b.Navigation("Clerks");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Patients");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Manager", b =>
                {
                    b.Navigation("MedicalHistories");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalSyndicate", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("NewsFeedPosts");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.Navigation("NewsFeedPosts");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.Navigation("Diagnosis")
                        .IsRequired();

                    b.Navigation("SuggestionFood")
                        .IsRequired();
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuspectDiabetesResult", b =>
                {
                    b.Navigation("Symptoms");
                });
#pragma warning restore 612, 618
        }
    }
}
